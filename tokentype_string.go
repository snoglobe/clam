// Code generated by "stringer -type=TokenType"; DO NOT EDIT.

package main

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[Id-0]
	_ = x[Number-1]
	_ = x[String-2]
	_ = x[True-3]
	_ = x[False-4]
	_ = x[Nil-5]
	_ = x[My-6]
	_ = x[Sub-7]
	_ = x[When-8]
	_ = x[Case-9]
	_ = x[If-10]
	_ = x[Unless-11]
	_ = x[Else-12]
	_ = x[While-13]
	_ = x[For-14]
	_ = x[In-15]
	_ = x[Until-16]
	_ = x[Do-17]
	_ = x[Return-18]
	_ = x[Inc-19]
	_ = x[Dec-20]
	_ = x[By-21]
	_ = x[Plus-22]
	_ = x[Minus-23]
	_ = x[Multiply-24]
	_ = x[Divide-25]
	_ = x[Modulo-26]
	_ = x[And-27]
	_ = x[Or-28]
	_ = x[Not-29]
	_ = x[Equal-30]
	_ = x[NotEqual-31]
	_ = x[Less-32]
	_ = x[LessEqual-33]
	_ = x[Greater-34]
	_ = x[GreaterEqual-35]
	_ = x[Assign-36]
	_ = x[Comma-37]
	_ = x[Colon-38]
	_ = x[Semicolon-39]
	_ = x[LeftParen-40]
	_ = x[RightParen-41]
	_ = x[LeftBrace-42]
	_ = x[RightBrace-43]
	_ = x[LeftBracket-44]
	_ = x[RightBracket-45]
	_ = x[Dot-46]
	_ = x[Eof-47]
}

const _TokenType_name = "IdNumberStringTrueFalseNilMySubWhenCaseIfUnlessElseWhileForInUntilDoReturnIncDecByPlusMinusMultiplyDivideModuloAndOrNotEqualNotEqualLessLessEqualGreaterGreaterEqualAssignCommaColonSemicolonLeftParenRightParenLeftBraceRightBraceLeftBracketRightBracketDotEof"

var _TokenType_index = [...]uint16{0, 2, 8, 14, 18, 23, 26, 28, 31, 35, 39, 41, 47, 51, 56, 59, 61, 66, 68, 74, 77, 80, 82, 86, 91, 99, 105, 111, 114, 116, 119, 124, 132, 136, 145, 152, 164, 170, 175, 180, 189, 198, 208, 217, 227, 238, 250, 253, 256}

func (i TokenType) String() string {
	if i >= TokenType(len(_TokenType_index)-1) {
		return "TokenType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _TokenType_name[_TokenType_index[i]:_TokenType_index[i+1]]
}
